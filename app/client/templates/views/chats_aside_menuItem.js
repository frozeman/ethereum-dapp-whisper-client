/**
Template Controllers

@module Templates
*/

/**
The chats aside chat menu item template

@class [template] views_chats_aside_menuItem
@constructor
*/


Template['views_chats_aside_menuItem'].helpers({
    /**
    Make the chat name editable

    @method (editName)
    @return {Boolean}
    */
    'editName': function() {
        return !this.privateChat && TemplateVar.get('editName');
    },
    /**
    Generate the chat name, based on all participants names

    @method (generatedName)
    */
    'generatedName': function(){
        if(_.isArray(this.users)) {
            var users = Users.find({_id: {$in: this.users}}).fetch();

            if(!_.isEmpty(users))
                return _.trim(_.pluck(users, 'name').join(', '),', ');
        }

        // return default name, if it couldn't be autogenerated
        return this._id;
    },
    /**
    Get all my chats

    @method (chats)
    */
    'unreadCount': function(){
        if(_.isArray(this.messages))
            return Messages.find({_id: {$in: this.messages}, unread: true}).count();
    }
});

Template['views_chats_aside_menuItem'].events({
    /**
    Edit the chat name

    @event click button.edit-name, click button.save-name
    */
    'click button.edit-name, click button.save-name, click input.chat-name': function(e){
        e.stopPropagation();
        e.preventDefault();

        TemplateVar.set('editName', true);

        Tracker.afterFlush(function(){
            $('.chat-name').get(0).focus()
        });
    },
    /**
    Save the edited chat name

    @event click button.save-name
    */
    'click button.save-name, keyup input.chat-name': function(e, template){

        if(!e.keyCode || e.keyCode === 13) {
            e.preventDefault();

            var name = _.trim(template.find('input.chat-name').value, "\n ");

            if(this.name !== name) {
                
                Chats.update(this._id, {$set: {
                        name: name
                    }
                });

                // SEND the CHANGE NOTIFICATION
                Whisper.addMessage(template.data._id,{
                    sending: true,
                    type: 'notification',
                    message: 'chatNameChanged',
                    chat: template.data._id,
                    timestamp: moment().unix(),
                    from: {
                        identity: Whisper.getIdentity().identity,
                        name: Whisper.getIdentity().name
                    },
                    // the new chat name
                    data: name
                });
            }

            TemplateVar.set('editName', false);
        }
    }
});