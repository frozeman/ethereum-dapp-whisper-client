{"version":3,"sources":["markdown/showdown.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,E;AACA,gD;AACA,E;AACA,kC;AACA,E;AACA,wD;AACA,mD;AACA,E;AACA,yD;AACA,wC;AACA,E;AACA,sC;AACA,E;AACA,W;AACA,W;AACA,W;AACA,E;AACA,gC;AACA,E;;AAEA,E;AACA,+D;AACA,mC;AACA,E;AACA,4D;AACA,yD;AACA,iE;AACA,+C;AACA,E;AACA,8D;AACA,8D;AACA,8D;AACA,E;AACA,4D;AACA,+D;AACA,kE;AACA,6D;AACA,+D;AACA,mD;AACA,E;AACA,8D;AACA,iE;AACA,6D;AACA,6D;AACA,oB;AACA,E;;;AAGA,E;AACA,kB;AACA,E;AACA,oC;AACA,E;AACA,8C;AACA,yC;AACA,E;AACA,iB;AACA,E;AACA,mD;AACA,+B;AACA,E;;;AAGA,E;AACA,qB;AACA,E;AACA,6D;AACA,8B;;AAEA,E;AACA,U;AACA,E;AACA,0D;AACA,yC;AACA,wB;AACA,S;AACA,0B;AACA,6B;AACA,4B;AACA,G;AACA,E;AACA,E;;AAEA,E;AACA,4B;AACA,E;AACA,8B;AACA,iD;AACA,E;;AAEA,E;AACA,Y;AACA,E;AACA,6C;AACA,yB;AACA,E;AACA,kD;;AAEA,E;AACA,W;AACA,E;;AAEA,kD;AACA,W;AACA,a;AACA,kB;;AAEA,+D;AACA,yC;AACA,qB;;AAEA,oB;AACA,2B;AACA,4B;;;AAGA,E;AACA,2C;AACA,E;;AAEA,sG;AACA,wB;;AAEA,U;AACA,6B;AACA,0F;AACA,+B;AACA,wB;AACA,oC;AACA,K;AACA,4C;AACA,6C;AACA,8B;AACA,8D;AACA,K;AACA,E;AACA,C;;AAEA,gC;AACA,E;AACA,kE;AACA,gE;AACA,8E;AACA,8B;AACA,E;;AAEA,uE;AACA,uE;AACA,gE;AACA,c;AACA,a;AACA,e;AACA,oB;;AAEA,gC;AACA,gE;AACA,4D;AACA,gC;AACA,gC;;AAEA,gC;AACA,8C;AACA,qC;AACA,iC;;AAEA,4B;AACA,kD;AACA,gD;;AAEA,6D;AACA,+B;;AAEA,+B;AACA,qB;;AAEA,uD;AACA,iE;AACA,iE;AACA,gC;AACA,sC;;AAEA,2B;AACA,iD;AACA,oC;AACA,I;;AAEA,8D;AACA,8D;AACA,kC;;AAEA,kD;AACA,8B;;AAEA,4C;AACA,oC;;AAEA,6B;;AAEA,oC;;AAEA,mC;AACA,iC;;AAEA,6B;AACA,gC;;AAEA,wB;AACA,kD;AACA,oC;AACA,I;;AAEA,a;AACA,E;AACA,E;AACA,W;AACA,E;;AAEA,gD;AACA,wD;;AAEA,kB;;AAEA,4B;AACA,iE;;AAEA,sD;AACA,mC;AACA,oD;AACA,G;;AAEA,qC;AACA,oD;AACA,gD;AACA,8B;AACA,mB;AACA,0D;AACA,kC;AACA,+D;AACA,mC;AACA,M;AACA,Y;AACA,iC;AACA,kC;AACA,K;AACA,M;AACA,U;AACA,iH;AACA,G;AACA,I;AACA,C;;;AAGA,6C;AACA,iB;AACA,sC;AACA,uC;AACA,yB;AACA,0B;AACA,E;AACA,E;;AAEA,4C;AACA,E;AACA,mE;AACA,mB;AACA,E;;AAEA,0D;;AAEA,G;AACA,2B;AACA,8D;AACA,Y;AACA,mC;AACA,Y;AACA,4B;AACA,Y;AACA,iC;AACA,Y;AACA,O;AACA,sE;AACA,U;AACA,4B;AACA,U;AACA,Y;AACA,+B;AACA,a;AACA,S;AACA,sB;AACA,G;;AAEA,2E;AACA,c;;AAEA,+H;AACA,qC;AACA,yB;AACA,2E;AACA,Y;AACA,oD;AACA,qD;AACA,iB;AACA,mB;AACA,6C;AACA,I;;AAEA,oD;AACA,a;AACA,G;AACA,G;;AAEA,6B;AACA,8B;;AAEA,a;AACA,C;;;AAGA,sC;AACA,yD;AACA,mC;;AAEA,wB;AACA,uE;AACA,uE;AACA,2E;AACA,qE;AACA,e;AACA,iK;AACA,yJ;;AAEA,wC;AACA,W;AACA,a;AACA,8C;AACA,c;AACA,Y;AACA,G;AACA,2E;AACA,2C;AACA,4E;AACA,yE;;AAEA,yD;AACA,G;AACA,2B;AACA,sB;AACA,oC;AACA,qC;AACA,uB;AACA,mD;AACA,yD;AACA,mC;AACA,oC;AACA,sC;AACA,qE;AACA,uB;AACA,G;AACA,uK;;AAEA,G;AACA,iE;AACA,G;;AAEA,G;AACA,2B;AACA,sB;AACA,oC;AACA,qC;AACA,uB;AACA,mD;AACA,wD;AACA,mC;AACA,oC;AACA,sC;AACA,qE;AACA,uB;AACA,G;AACA,6M;;AAEA,2E;AACA,6C;;AAEA,G;AACA,uB;AACA,sB;AACA,yC;AACA,W;AACA,8B;AACA,uB;AACA,iB;AACA,mC;AACA,S;AACA,2C;AACA,G;AACA,kB;AACA,G;AACA,wF;;AAEA,8C;;AAEA,G;AACA,uB;AACA,sB;AACA,yC;AACA,2C;AACA,K;AACA,oB;AACA,I;AACA,S;AACA,2C;AACA,G;AACA,kB;AACA,G;AACA,wF;;AAEA,kE;;AAEA,G;AACA,uB;AACA,K;AACA,yC;AACA,G;AACA,sB;AACA,2C;AACA,M;AACA,mB;AACA,W;AACA,O;AACA,I;AACA,S;AACA,2C;AACA,G;AACA,kB;AACA,G;AACA,6F;;AAEA,sE;AACA,mC;AACA,a;AACA,C;;AAEA,2C;AACA,oB;;AAEA,qB;AACA,6C;AACA,yC;;AAEA,8B;AACA,2C;;AAEA,sE;AACA,oE;;AAEA,kB;AACA,E;;AAEA,qC;AACA,E;AACA,0D;AACA,iD;AACA,E;AACA,yB;;AAEA,wB;AACA,+B;AACA,+D;AACA,+D;AACA,+D;;AAEA,uB;AACA,4B;AACA,6B;;AAEA,oE;AACA,sE;AACA,uE;AACA,qC;AACA,8B;AACA,8B;;AAEA,a;AACA,E;;;AAGA,oC;AACA,E;AACA,oE;AACA,iD;AACA,E;;AAEA,2B;AACA,qD;AACA,sC;;AAEA,0D;AACA,2C;AACA,wB;AACA,yB;;AAEA,yD;AACA,6D;AACA,kD;AACA,2B;AACA,mC;AACA,gC;;AAEA,mB;AACA,2C;;AAEA,a;AACA,C;;AAEA,6D;AACA,E;AACA,qE;AACA,0E;AACA,E;;AAEA,+D;AACA,0D;AACA,yE;;AAEA,kD;AACA,2D;AACA,sC;AACA,a;AACA,I;;AAEA,a;AACA,C;;AAEA,iC;AACA,E;AACA,oD;AACA,E;AACA,G;AACA,yD;AACA,G;;AAEA,G;AACA,uB;AACA,mC;AACA,K;AACA,I;AACA,O;AACA,mD;AACA,M;AACA,gC;AACA,M;AACA,I;AACA,K;;AAEA,iC;AACA,4D;;AAEA,K;AACA,uB;AACA,K;AACA,+C;AACA,0B;AACA,G;AACA,wG;;AAEA,G;AACA,+D;AACA,G;;AAEA,G;AACA,uB;AACA,mC;AACA,M;AACA,K;AACA,Q;AACA,mD;AACA,M;AACA,kC;AACA,K;AACA,I;AACA,K;AACA,2B;AACA,S;AACA,sC;AACA,4B;AACA,S;AACA,e;AACA,gC;AACA,0B;AACA,4B;AACA,mE;AACA,+B;AACA,K;AACA,G;AACA,qB;AACA,G;AACA,wI;;AAEA,G;AACA,uD;AACA,+D;AACA,wB;AACA,G;;AAEA,G;AACA,uB;AACA,oC;AACA,K;AACA,4D;AACA,K;AACA,+C;AACA,sB;AACA,G;AACA,oE;;AAEA,a;AACA,C;;AAEA,gE;AACA,8B;AACA,sB;AACA,sB;AACA,iC;AACA,e;AACA,gB;;AAEA,iB;AACA,sB;AACA,uD;AACA,0D;AACA,G;AACA,oB;;AAEA,qC;AACA,yB;AACA,wC;AACA,8B;AACA,I;AACA,G;AACA,Q;AACA,4C;AACA,0C;AACA,a;AACA,W;AACA,uB;AACA,I;AACA,G;AACA,E;;AAEA,kC;AACA,wC;;AAEA,mB;AACA,uC;AACA,uC;AACA,wC;AACA,E;;AAEA,oC;;AAEA,e;AACA,C;;;AAGA,gC;AACA,E;AACA,iD;AACA,E;;AAEA,G;AACA,iE;AACA,G;;AAEA,G;AACA,uB;AACA,kC;AACA,M;AACA,4B;AACA,K;;AAEA,gC;AACA,2D;;AAEA,K;AACA,sB;AACA,K;AACA,4C;AACA,oB;AACA,G;AACA,oF;;AAEA,G;AACA,kE;AACA,gC;;AAEA,G;AACA,uB;AACA,kC;AACA,M;AACA,4B;AACA,K;AACA,+C;AACA,0B;AACA,S;AACA,qC;AACA,+B;AACA,S;AACA,c;AACA,+B;AACA,yB;AACA,2B;AACA,U;AACA,8B;AACA,I;AACA,G;AACA,oB;AACA,G;AACA,yG;;AAEA,a;AACA,C;;AAEA,+D;AACA,sB;AACA,qB;AACA,iC;AACA,e;AACA,gB;;AAEA,wB;;AAEA,iB;AACA,sB;AACA,uD;AACA,yD;AACA,G;AACA,oB;;AAEA,qC;AACA,yB;AACA,wC;AACA,8B;AACA,I;AACA,G;AACA,Q;AACA,sB;AACA,G;AACA,E;;AAEA,4C;AACA,kC;AACA,kE;;AAEA,iE;AACA,uB;;AAEA,qB;AACA,uC;AACA,uC;AACA,wC;AACA,I;;AAEA,iB;;AAEA,e;AACA,C;;;AAGA,iC;;AAEA,yB;AACA,Y;AACA,Y;AACA,G;AACA,Y;AACA,Y;AACA,G;AACA,kD;AACA,8G;;AAEA,kD;AACA,8G;;AAEA,sB;AACA,e;AACA,gB;AACA,uC;AACA,Q;AACA,oB;AACA,G;;AAEA,G;AACA,uB;AACA,sC;AACA,S;AACA,gC;AACA,S;AACA,iD;AACA,M;AACA,yB;AACA,G;;AAEA,2D;AACA,8B;AACA,2B;AACA,gH;AACA,K;;AAEA,uB;AACA,+C;AACA,E;AACA,a;AACA,C;;AAEA,kE;AACA,sB;;AAEA,+B;AACA,E;AACA,+D;AACA,E;;AAEA,4D;AACA,gD;AACA,c;;AAEA,yD;;AAEA,G;AACA,oB;AACA,8B;AACA,iB;AACA,8C;AACA,oD;AACA,U;AACA,I;AACA,U;AACA,iB;AACA,oD;AACA,I;AACA,U;AACA,U;AACA,gE;AACA,W;AACA,2B;AACA,K;AACA,I;AACA,K;AACA,G;AACA,gH;;AAEA,oB;AACA,6D;AACA,iB;AACA,0D;;AAEA,oE;AACA,0D;AACA,4C;AACA,wC;;AAEA,sE;AACA,iE;AACA,mE;AACA,yC;AACA,sC;AACA,8D;AACA,iB;AACA,K;AACA,S;AACA,sH;AACA,gE;AACA,kB;AACA,iB;;AAEA,0D;AACA,oE;AACA,0D;AACA,gD;AACA,wC;AACA,wE;AACA,iB;AACA,K;AACA,E;;AAEA,6B;AACA,8B;;AAEA,a;AACA,C;;AAEA,wC;AACA,E;AACA,4E;AACA,+B;AACA,E;AACA,qE;AACA,qE;AACA,4D;AACA,G;AACA,qE;AACA,wB;AACA,G;AACA,uC;AACA,wC;AACA,qB;AACA,G;AACA,uE;AACA,uC;AACA,G;AACA,qE;AACA,mE;AACA,iE;AACA,iE;AACA,iE;AACA,gD;;AAEA,gB;;AAEA,8B;AACA,6C;;AAEA,yC;AACA,kB;;AAEA,G;AACA,+B;AACA,mC;AACA,4C;AACA,8C;AACA,yC;AACA,a;AACA,2C;AACA,wB;AACA,G;AACA,wH;AACA,mC;AACA,iB;AACA,yB;AACA,0B;;AAEA,oD;AACA,0C;AACA,I;AACA,S;AACA,+B;AACA,oC;AACA,iD;AACA,+B;AACA,I;;AAEA,qC;AACA,G;AACA,G;;AAEA,6B;AACA,uC;;AAEA,gB;AACA,iB;AACA,C;;;AAGA,oC;AACA,E;AACA,0C;AACA,E;;AAEA,G;AACA,2B;AACA,c;AACA,kF;AACA,O;AACA,qG;AACA,U;AACA,M;AACA,I;AACA,yD;AACA,sB;AACA,G;;AAEA,2E;AACA,c;;AAEA,wF;AACA,8B;AACA,sB;AACA,qB;;AAEA,iD;AACA,iC;AACA,sE;AACA,yE;;AAEA,6D;;AAEA,0C;AACA,G;AACA,G;;AAEA,6B;AACA,8B;;AAEA,a;AACA,E;;AAEA,0C;AACA,E;AACA,oC;AACA,Y;AACA,W;AACA,sB;AACA,wB;AACA,O;AACA,O;AACA,E;;;AAGA,2E;AACA,c;;AAEA,yD;AACA,8B;AACA,qB;AACA,sB;;AAEA,sC;AACA,iC;AACA,sE;AACA,yE;;AAEA,mH;;AAEA,+B;AACA,G;AACA,G;;AAEA,6B;AACA,8B;;AAEA,a;AACA,C;;AAEA,gC;AACA,wC;AACA,0D;AACA,C;;AAEA,mC;AACA,E;AACA,yD;AACA,E;AACA,uE;AACA,+D;AACA,E;AACA,+C;AACA,E;AACA,wB;AACA,E;AACA,+D;AACA,E;AACA,4D;AACA,gE;AACA,8C;AACA,E;AACA,gE;AACA,E;AACA,6B;AACA,E;AACA,e;AACA,E;AACA,oC;AACA,E;;AAEA,G;AACA,uB;AACA,mE;AACA,qC;AACA,iC;AACA,W;AACA,yD;AACA,I;AACA,8B;AACA,Q;AACA,wB;AACA,G;;AAEA,2D;AACA,oC;AACA,c;AACA,wD;AACA,uD;AACA,sB;AACA,kC;AACA,K;;AAEA,a;AACA,C;;AAEA,kC;AACA,E;AACA,8D;AACA,4D;AACA,4C;AACA,E;AACA,gD;AACA,yC;AACA,mC;;AAEA,wC;AACA,kC;AACA,kC;;AAEA,sD;AACA,iD;;AAEA,iC;AACA,K;;AAEA,Q;;AAEA,e;;AAEA,6B;AACA,K;;AAEA,a;AACA,C;;;AAGA,wC;;AAEA,2B;AACA,0D;AACA,yB;;AAEA,kD;AACA,iB;;AAEA,a;AACA,C;;;AAGA,qC;;AAEA,G;AACA,uB;AACA,oC;AACA,I;AACA,kD;AACA,sC;AACA,+C;AACA,sB;AACA,K;AACA,G;AACA,wB;AACA,G;;AAEA,2D;AACA,2B;AACA,e;;AAEA,iD;AACA,gD;;AAEA,yE;;AAEA,8B;AACA,6B;;AAEA,mE;AACA,yC;;AAEA,qC;AACA,4E;AACA,mB;AACA,kC;AACA,6B;AACA,kB;AACA,mD;AACA,qC;AACA,iC;AACA,gB;AACA,O;;AAEA,+D;AACA,K;AACA,a;AACA,C;;;AAGA,sC;AACA,E;AACA,W;AACA,kD;AACA,E;;AAEA,qC;AACA,iC;AACA,iC;;AAEA,mC;AACA,mB;;AAEA,G;AACA,kB;AACA,G;AACA,wB;AACA,4B;AACA,qB;;AAEA,uC;AACA,qC;AACA,sB;AACA,G;AACA,mC;AACA,4B;AACA,yC;AACA,gB;AACA,sB;AACA,G;;AAEA,E;;AAEA,G;AACA,yB;AACA,G;AACA,uB;AACA,4B;AACA,6C;AACA,+C;AACA,4C;AACA,0E;AACA,yD;AACA,G;AACA,E;;AAEA,8B;AACA,C;;;AAGA,2C;AACA,8E;;AAEA,yE;AACA,2C;AACA,mE;;AAEA,oB;AACA,kD;;AAEA,a;AACA,C;;;AAGA,8C;AACA,E;AACA,wB;AACA,uE;AACA,yB;AACA,E;;AAEA,wD;AACA,gC;AACA,G;AACA,6C;AACA,0D;AACA,G;AACA,sE;AACA,qE;;AAEA,0D;AACA,2E;AACA,a;AACA,C;;;AAGA,mC;;AAEA,kF;;AAEA,yC;;AAEA,G;AACA,uB;AACA,I;AACA,e;AACA,I;AACA,W;AACA,M;AACA,qC;AACA,I;AACA,I;AACA,gC;AACA,G;AACA,oF;AACA,2B;AACA,2D;AACA,G;AACA,G;;AAEA,a;AACA,C;;;AAGA,0C;AACA,E;AACA,mD;AACA,E;AACA,mE;AACA,+D;AACA,gE;AACA,E;AACA,6E;AACA,gF;AACA,2E;AACA,E;AACA,oE;AACA,4C;AACA,E;;AAEA,e;AACA,kD;AACA,gE;AACA,0B;AACA,G;;AAEA,yB;;AAEA,yC;AACA,kB;AACA,0C;AACA,gD;AACA,wB;AACA,6C;AACA,yB;AACA,uC;AACA,U;AACA,gC;AACA,gC;AACA,qB;AACA,M;AACA,G;AACA,Y;AACA,I;;AAEA,oD;AACA,gF;;AAEA,a;AACA,C;;;AAGA,4C;AACA,E;AACA,wD;AACA,E;AACA,iC;AACA,2B;AACA,wC;AACA,iD;AACA,G;AACA,G;AACA,a;AACA,C;;;AAGA,+B;AACA,E;AACA,kD;AACA,E;;AAEA,+C;AACA,8C;;AAEA,wE;;AAEA,4B;AACA,8B;;AAEA,a;AACA,C;;AAEA,6B;AACA,qD;AACA,2D;AACA,sC;;AAEA,yB;AACA,mE;;AAEA,sC;AACA,mC;;AAEA,8D;AACA,kC;AACA,8B;AACA,wB;AACA,yE;;AAEA,8C;AACA,oD;;AAEA,sB;AACA,G;AACA,G;;AAEA,sB;AACA,8D;AACA,+B;;AAEA,a;AACA,C;;;AAGA,E;AACA,gC;AACA,E;;;AAGA,sE;AACA,yD;AACA,8C;AACA,6E;;AAEA,sB;AACA,qC;AACA,E;;AAEA,yC;AACA,sD;;AAEA,a;AACA,C;;;AAGA,yD;AACA,yC;AACA,kC;AACA,C;;AAEA,8B;;;AAGA,S;AACA,6D;;AAEA,uC;AACA,mE;AACA,qD;AACA,iD;AACA,mC;AACA,wB;AACA,O;AACA,C","file":"/packages/markdown.js","sourcesContent":["//\n// showdown.js -- A javascript port of Markdown.\n//\n// Copyright (c) 2007 John Fraser.\n//\n// Original Markdown Copyright (c) 2004-2005 John Gruber\n//   <http://daringfireball.net/projects/markdown/>\n//\n// Redistributable under a BSD-style open source license.\n// See license.txt for more information.\n//\n// The full source distribution is at:\n//\n//\t\t\t\tA A L\n//\t\t\t\tT C A\n//\t\t\t\tT K B\n//\n//   <http://www.attacklab.net/>\n//\n\n//\n// Wherever possible, Showdown is a straight, line-by-line port\n// of the Perl version of Markdown.\n//\n// This is not a normal parser design; it's basically just a\n// series of string substitutions.  It's hard to read and\n// maintain this way,  but keeping Showdown close to the original\n// design makes it easier to port new features.\n//\n// More importantly, Showdown behaves like markdown.pl in most\n// edge cases.  So web applications can do client-side preview\n// in Javascript, and then build identical HTML on the server.\n//\n// This port needs the new RegExp functionality of ECMA 262,\n// 3rd Edition (i.e. Javascript 1.5).  Most modern web browsers\n// should do fine.  Even with the new regular expression features,\n// We do a lot of work to emulate Perl's regex functionality.\n// The tricky changes in this file mostly have the \"attacklab:\"\n// label.  Major or self-explanatory changes don't.\n//\n// Smart diff tools like Araxis Merge will be able to match up\n// this file with markdown.pl in a useful way.  A little tweaking\n// helps: in a copy of markdown.pl, replace \"#\" with \"//\" and\n// replace \"$text\" with \"text\".  Be sure to ignore whitespace\n// and line endings.\n//\n\n\n//\n// Showdown usage:\n//\n//   var text = \"Markdown *rocks*.\";\n//\n//   var converter = new Showdown.converter();\n//   var html = converter.makeHtml(text);\n//\n//   alert(html);\n//\n// Note: move the sample code to the bottom of this\n// file before uncommenting it.\n//\n\n\n//\n// Showdown namespace\n//\n// METEOR CHANGE: remove \"var\" so that this isn't file-local.\nShowdown = { extensions: {} };\n\n//\n// forEach\n//\nvar forEach = Showdown.forEach = function(obj, callback) {\n\tif (typeof obj.forEach === 'function') {\n\t\tobj.forEach(callback);\n\t} else {\n\t\tvar i, len = obj.length;\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tcallback(obj[i], i, obj);\n\t\t}\n\t}\n};\n\n//\n// Standard extension naming\n//\nvar stdExtName = function(s) {\n\treturn s.replace(/[_-]||\\s/g, '').toLowerCase();\n};\n\n//\n// converter\n//\n// Wraps all \"globals\" so that the only thing\n// exposed is makeHtml().\n//\nShowdown.converter = function(converter_options) {\n\n//\n// Globals:\n//\n\n// Global hashes, used by various utility routines\nvar g_urls;\nvar g_titles;\nvar g_html_blocks;\n\n// Used to track when we're inside an ordered or unordered list\n// (see _ProcessListItems() for details):\nvar g_list_level = 0;\n\n// Global extensions\nvar g_lang_extensions = [];\nvar g_output_modifiers = [];\n\n\n//\n// Automatic Extension Loading (node only):\n//\n\nif (typeof module !== 'undefind' && typeof exports !== 'undefined' && typeof require !== 'undefind') {\n\tvar fs = require('fs');\n\n\tif (fs) {\n\t\t// Search extensions folder\n\t\tvar extensions = fs.readdirSync((__dirname || '.')+'/extensions').filter(function(file){\n\t\t\treturn ~file.indexOf('.js');\n\t\t}).map(function(file){\n\t\t\treturn file.replace(/\\.js$/, '');\n\t\t});\n\t\t// Load extensions into Showdown namespace\n\t\tShowdown.forEach(extensions, function(ext){\n\t\t\tvar name = stdExtName(ext);\n\t\t\tShowdown.extensions[name] = require('./extensions/' + ext);\n\t\t});\n\t}\n}\n\nthis.makeHtml = function(text) {\n//\n// Main function. The order in which other subs are called here is\n// essential. Link and image substitutions need to happen before\n// _EscapeSpecialCharsWithinTagAttributes(), so that any *'s or _'s in the <a>\n// and <img> tags get encoded.\n//\n\n\t// Clear the global hashes. If we don't clear these, you get conflicts\n\t// from other articles when generating a page which contains more than\n\t// one article (e.g. an index page that shows the N most recent\n\t// articles):\n\tg_urls = {};\n\tg_titles = {};\n\tg_html_blocks = [];\n\n\t// attacklab: Replace ~ with ~T\n\t// This lets us use tilde as an escape char to avoid md5 hashes\n\t// The choice of character is arbitray; anything that isn't\n\t// magic in Markdown will work.\n\ttext = text.replace(/~/g,\"~T\");\n\n\t// attacklab: Replace $ with ~D\n\t// RegExp interprets $ as a special character\n\t// when it's in a replacement string\n\ttext = text.replace(/\\$/g,\"~D\");\n\n\t// Standardize line endings\n\ttext = text.replace(/\\r\\n/g,\"\\n\"); // DOS to Unix\n\ttext = text.replace(/\\r/g,\"\\n\"); // Mac to Unix\n\n\t// Make sure text begins and ends with a couple of newlines:\n\ttext = \"\\n\\n\" + text + \"\\n\\n\";\n\n\t// Convert all tabs to spaces.\n\ttext = _Detab(text);\n\n\t// Strip any lines consisting only of spaces and tabs.\n\t// This makes subsequent regexen easier to write, because we can\n\t// match consecutive blank lines with /\\n+/ instead of something\n\t// contorted like /[ \\t]*\\n+/ .\n\ttext = text.replace(/^[ \\t]+$/mg,\"\");\n\n\t// Run language extensions\n\tShowdown.forEach(g_lang_extensions, function(x){\n\t\ttext = _ExecuteExtension(x, text);\n\t});\n\n\t// Handle github codeblocks prior to running HashHTML so that\n\t// HTML contained within the codeblock gets escaped propertly\n\ttext = _DoGithubCodeBlocks(text);\n\n\t// Turn block-level HTML blocks into hash entries\n\ttext = _HashHTMLBlocks(text);\n\n\t// Strip link definitions, store in hashes.\n\ttext = _StripLinkDefinitions(text);\n\n\ttext = _RunBlockGamut(text);\n\n\ttext = _UnescapeSpecialChars(text);\n\n\t// attacklab: Restore dollar signs\n\ttext = text.replace(/~D/g,\"$$\");\n\n\t// attacklab: Restore tildes\n\ttext = text.replace(/~T/g,\"~\");\n\n\t// Run output modifiers\n\tShowdown.forEach(g_output_modifiers, function(x){\n\t\ttext = _ExecuteExtension(x, text);\n\t});\n\n\treturn text;\n};\n//\n// Options:\n//\n\n// Parse extensions options into separate arrays\nif (converter_options && converter_options.extensions) {\n\n  var self = this;\n\n\t// Iterate over each plugin\n\tShowdown.forEach(converter_options.extensions, function(plugin){\n\n\t\t// Assume it's a bundled plugin if a string is given\n\t\tif (typeof plugin === 'string') {\n\t\t\tplugin = Showdown.extensions[stdExtName(plugin)];\n\t\t}\n\n\t\tif (typeof plugin === 'function') {\n\t\t\t// Iterate over each extension within that plugin\n\t\t\tShowdown.forEach(plugin(self), function(ext){\n\t\t\t\t// Sort extensions by type\n\t\t\t\tif (ext.type) {\n\t\t\t\t\tif (ext.type === 'language' || ext.type === 'lang') {\n\t\t\t\t\t\tg_lang_extensions.push(ext);\n\t\t\t\t\t} else if (ext.type === 'output' || ext.type === 'html') {\n\t\t\t\t\t\tg_output_modifiers.push(ext);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Assume language extension\n\t\t\t\t\tg_output_modifiers.push(ext);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthrow \"Extension '\" + plugin + \"' could not be loaded.  It was either not found or is not a valid extension.\";\n\t\t}\n\t});\n}\n\n\nvar _ExecuteExtension = function(ext, text) {\n\tif (ext.regex) {\n\t\tvar re = new RegExp(ext.regex, 'g');\n\t\treturn text.replace(re, ext.replace);\n\t} else if (ext.filter) {\n\t\treturn ext.filter(text);\n\t}\n};\n\nvar _StripLinkDefinitions = function(text) {\n//\n// Strips link definitions from text, stores the URLs and titles in\n// hash references.\n//\n\n\t// Link defs are in the form: ^[id]: url \"optional title\"\n\n\t/*\n\t\tvar text = text.replace(/\n\t\t\t\t^[ ]{0,3}\\[(.+)\\]:  // id = $1  attacklab: g_tab_width - 1\n\t\t\t\t  [ \\t]*\n\t\t\t\t  \\n?\t\t\t\t// maybe *one* newline\n\t\t\t\t  [ \\t]*\n\t\t\t\t<?(\\S+?)>?\t\t\t// url = $2\n\t\t\t\t  [ \\t]*\n\t\t\t\t  \\n?\t\t\t\t// maybe one newline\n\t\t\t\t  [ \\t]*\n\t\t\t\t(?:\n\t\t\t\t  (\\n*)\t\t\t\t// any lines skipped = $3 attacklab: lookbehind removed\n\t\t\t\t  [\"(]\n\t\t\t\t  (.+?)\t\t\t\t// title = $4\n\t\t\t\t  [\")]\n\t\t\t\t  [ \\t]*\n\t\t\t\t)?\t\t\t\t\t// title is optional\n\t\t\t\t(?:\\n+|$)\n\t\t\t  /gm,\n\t\t\t  function(){...});\n\t*/\n\n\t// attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n\ttext += \"~0\";\n\n\ttext = text.replace(/^[ ]{0,3}\\[(.+)\\]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"(](.+?)[\")][ \\t]*)?(?:\\n+|(?=~0))/gm,\n\t\tfunction (wholeMatch,m1,m2,m3,m4) {\n\t\t\tm1 = m1.toLowerCase();\n\t\t\tg_urls[m1] = _EncodeAmpsAndAngles(m2);  // Link IDs are case-insensitive\n\t\t\tif (m3) {\n\t\t\t\t// Oops, found blank lines, so it's not a title.\n\t\t\t\t// Put back the parenthetical statement we stole.\n\t\t\t\treturn m3+m4;\n\t\t\t} else if (m4) {\n\t\t\t\tg_titles[m1] = m4.replace(/\"/g,\"&quot;\");\n\t\t\t}\n\n\t\t\t// Completely remove the definition from the text\n\t\t\treturn \"\";\n\t\t}\n\t);\n\n\t// attacklab: strip sentinel\n\ttext = text.replace(/~0/,\"\");\n\n\treturn text;\n}\n\n\nvar _HashHTMLBlocks = function(text) {\n\t// attacklab: Double up blank lines to reduce lookaround\n\ttext = text.replace(/\\n/g,\"\\n\\n\");\n\n\t// Hashify HTML blocks:\n\t// We only want to do this for block-level HTML tags, such as headers,\n\t// lists, and tables. That's because we still want to wrap <p>s around\n\t// \"paragraphs\" that are wrapped in non-block-level tags, such as anchors,\n\t// phrase emphasis, and spans. The list of tags we're looking for is\n\t// hard-coded:\n\tvar block_tags_a = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del|style|section|header|footer|nav|article|aside\";\n\tvar block_tags_b = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|header|footer|nav|article|aside\";\n\n\t// First, look for nested blocks, e.g.:\n\t//   <div>\n\t//     <div>\n\t//     tags for inner block must be indented.\n\t//     </div>\n\t//   </div>\n\t//\n\t// The outermost tags must start at the left margin for this to match, and\n\t// the inner nested divs must be indented.\n\t// We need to do this before the next, more liberal match, because the next\n\t// match will start at the first `<div>` and stop at the first `</div>`.\n\n\t// attacklab: This regex can be expensive when it fails.\n\t/*\n\t\tvar text = text.replace(/\n\t\t(\t\t\t\t\t\t// save in $1\n\t\t\t^\t\t\t\t\t// start of line  (with /m)\n\t\t\t<($block_tags_a)\t// start tag = $2\n\t\t\t\\b\t\t\t\t\t// word break\n\t\t\t\t\t\t\t\t// attacklab: hack around khtml/pcre bug...\n\t\t\t[^\\r]*?\\n\t\t\t// any number of lines, minimally matching\n\t\t\t</\\2>\t\t\t\t// the matching end tag\n\t\t\t[ \\t]*\t\t\t\t// trailing spaces/tabs\n\t\t\t(?=\\n+)\t\t\t\t// followed by a newline\n\t\t)\t\t\t\t\t\t// attacklab: there are sentinel newlines at end of document\n\t\t/gm,function(){...}};\n\t*/\n\ttext = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\\b[^\\r]*?\\n<\\/\\2>[ \\t]*(?=\\n+))/gm,hashElement);\n\n\t//\n\t// Now match more liberally, simply from `\\n<tag>` to `</tag>\\n`\n\t//\n\n\t/*\n\t\tvar text = text.replace(/\n\t\t(\t\t\t\t\t\t// save in $1\n\t\t\t^\t\t\t\t\t// start of line  (with /m)\n\t\t\t<($block_tags_b)\t// start tag = $2\n\t\t\t\\b\t\t\t\t\t// word break\n\t\t\t\t\t\t\t\t// attacklab: hack around khtml/pcre bug...\n\t\t\t[^\\r]*?\t\t\t\t// any number of lines, minimally matching\n\t\t\t</\\2>\t\t\t\t// the matching end tag\n\t\t\t[ \\t]*\t\t\t\t// trailing spaces/tabs\n\t\t\t(?=\\n+)\t\t\t\t// followed by a newline\n\t\t)\t\t\t\t\t\t// attacklab: there are sentinel newlines at end of document\n\t\t/gm,function(){...}};\n\t*/\n\ttext = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|header|footer|nav|article|aside)\\b[^\\r]*?<\\/\\2>[ \\t]*(?=\\n+)\\n)/gm,hashElement);\n\n\t// Special case just for <hr />. It was easier to make a special case than\n\t// to make the other regex more complicated.\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(\t\t\t\t\t\t// save in $1\n\t\t\t\\n\\n\t\t\t\t// Starting after a blank line\n\t\t\t[ ]{0,3}\n\t\t\t(<(hr)\t\t\t\t// start tag = $2\n\t\t\t\\b\t\t\t\t\t// word break\n\t\t\t([^<>])*?\t\t\t//\n\t\t\t\\/?>)\t\t\t\t// the matching end tag\n\t\t\t[ \\t]*\n\t\t\t(?=\\n{2,})\t\t\t// followed by a blank line\n\t\t)\n\t\t/g,hashElement);\n\t*/\n\ttext = text.replace(/(\\n[ ]{0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,hashElement);\n\n\t// Special case for standalone HTML comments:\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(\t\t\t\t\t\t// save in $1\n\t\t\t\\n\\n\t\t\t\t// Starting after a blank line\n\t\t\t[ ]{0,3}\t\t\t// attacklab: g_tab_width - 1\n\t\t\t<!\n\t\t\t(--[^\\r]*?--\\s*)+\n\t\t\t>\n\t\t\t[ \\t]*\n\t\t\t(?=\\n{2,})\t\t\t// followed by a blank line\n\t\t)\n\t\t/g,hashElement);\n\t*/\n\ttext = text.replace(/(\\n\\n[ ]{0,3}<!(--[^\\r]*?--\\s*)+>[ \\t]*(?=\\n{2,}))/g,hashElement);\n\n\t// PHP and ASP-style processor instructions (<?...?> and <%...%>)\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(?:\n\t\t\t\\n\\n\t\t\t\t// Starting after a blank line\n\t\t)\n\t\t(\t\t\t\t\t\t// save in $1\n\t\t\t[ ]{0,3}\t\t\t// attacklab: g_tab_width - 1\n\t\t\t(?:\n\t\t\t\t<([?%])\t\t\t// $2\n\t\t\t\t[^\\r]*?\n\t\t\t\t\\2>\n\t\t\t)\n\t\t\t[ \\t]*\n\t\t\t(?=\\n{2,})\t\t\t// followed by a blank line\n\t\t)\n\t\t/g,hashElement);\n\t*/\n\ttext = text.replace(/(?:\\n\\n)([ ]{0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,hashElement);\n\n\t// attacklab: Undo double lines (see comment at top of this function)\n\ttext = text.replace(/\\n\\n/g,\"\\n\");\n\treturn text;\n}\n\nvar hashElement = function(wholeMatch,m1) {\n\tvar blockText = m1;\n\n\t// Undo double lines\n\tblockText = blockText.replace(/\\n\\n/g,\"\\n\");\n\tblockText = blockText.replace(/^\\n/,\"\");\n\n\t// strip trailing blank lines\n\tblockText = blockText.replace(/\\n+$/g,\"\");\n\n\t// Replace the element text with a marker (\"~KxK\" where x is its key)\n\tblockText = \"\\n\\n~K\" + (g_html_blocks.push(blockText)-1) + \"K\\n\\n\";\n\n\treturn blockText;\n};\n\nvar _RunBlockGamut = function(text) {\n//\n// These are all the transformations that form block-level\n// tags like paragraphs, headers, and list items.\n//\n\ttext = _DoHeaders(text);\n\n\t// Do Horizontal Rules:\n\tvar key = hashBlock(\"<hr />\");\n\ttext = text.replace(/^[ ]{0,2}([ ]?\\*[ ]?){3,}[ \\t]*$/gm,key);\n\ttext = text.replace(/^[ ]{0,2}([ ]?\\-[ ]?){3,}[ \\t]*$/gm,key);\n\ttext = text.replace(/^[ ]{0,2}([ ]?\\_[ ]?){3,}[ \\t]*$/gm,key);\n\n\ttext = _DoLists(text);\n\ttext = _DoCodeBlocks(text);\n\ttext = _DoBlockQuotes(text);\n\n\t// We already ran _HashHTMLBlocks() before, in Markdown(), but that\n\t// was to escape raw HTML in the original Markdown source. This time,\n\t// we're escaping the markup we've just created, so that we don't wrap\n\t// <p> tags around block-level tags.\n\ttext = _HashHTMLBlocks(text);\n\ttext = _FormParagraphs(text);\n\n\treturn text;\n};\n\n\nvar _RunSpanGamut = function(text) {\n//\n// These are all the transformations that occur *within* block-level\n// tags like paragraphs, headers, and list items.\n//\n\n\ttext = _DoCodeSpans(text);\n\ttext = _EscapeSpecialCharsWithinTagAttributes(text);\n\ttext = _EncodeBackslashEscapes(text);\n\n\t// Process anchor and image tags. Images must come first,\n\t// because ![foo][f] looks like an anchor.\n\ttext = _DoImages(text);\n\ttext = _DoAnchors(text);\n\n\t// Make links out of things like `<http://example.com/>`\n\t// Must come after _DoAnchors(), because you can use < and >\n\t// delimiters in inline links like [this](<url>).\n\ttext = _DoAutoLinks(text);\n\ttext = _EncodeAmpsAndAngles(text);\n\ttext = _DoItalicsAndBold(text);\n\n\t// Do hard breaks:\n\ttext = text.replace(/  +\\n/g,\" <br />\\n\");\n\n\treturn text;\n}\n\nvar _EscapeSpecialCharsWithinTagAttributes = function(text) {\n//\n// Within tags -- meaning between < and > -- encode [\\ ` * _] so they\n// don't conflict with their use in Markdown for code, italics and strong.\n//\n\n\t// Build a regex to find HTML tags and comments.  See Friedl's\n\t// \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n\tvar regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n\n\ttext = text.replace(regex, function(wholeMatch) {\n\t\tvar tag = wholeMatch.replace(/(.)<\\/?code>(?=.)/g,\"$1`\");\n\t\ttag = escapeCharacters(tag,\"\\\\`*_\");\n\t\treturn tag;\n\t});\n\n\treturn text;\n}\n\nvar _DoAnchors = function(text) {\n//\n// Turn Markdown link shortcuts into XHTML <a> tags.\n//\n\t//\n\t// First, handle reference-style links: [link text] [id]\n\t//\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(\t\t\t\t\t\t\t// wrap whole match in $1\n\t\t\t\\[\n\t\t\t(\n\t\t\t\t(?:\n\t\t\t\t\t\\[[^\\]]*\\]\t\t// allow brackets nested one level\n\t\t\t\t\t|\n\t\t\t\t\t[^\\[]\t\t\t// or anything else\n\t\t\t\t)*\n\t\t\t)\n\t\t\t\\]\n\n\t\t\t[ ]?\t\t\t\t\t// one optional space\n\t\t\t(?:\\n[ ]*)?\t\t\t\t// one optional newline followed by spaces\n\n\t\t\t\\[\n\t\t\t(.*?)\t\t\t\t\t// id = $3\n\t\t\t\\]\n\t\t)()()()()\t\t\t\t\t// pad remaining backreferences\n\t\t/g,_DoAnchors_callback);\n\t*/\n\ttext = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g,writeAnchorTag);\n\n\t//\n\t// Next, inline-style links: [link text](url \"optional title\")\n\t//\n\n\t/*\n\t\ttext = text.replace(/\n\t\t\t(\t\t\t\t\t\t// wrap whole match in $1\n\t\t\t\t\\[\n\t\t\t\t(\n\t\t\t\t\t(?:\n\t\t\t\t\t\t\\[[^\\]]*\\]\t// allow brackets nested one level\n\t\t\t\t\t|\n\t\t\t\t\t[^\\[\\]]\t\t\t// or anything else\n\t\t\t\t)\n\t\t\t)\n\t\t\t\\]\n\t\t\t\\(\t\t\t\t\t\t// literal paren\n\t\t\t[ \\t]*\n\t\t\t()\t\t\t\t\t\t// no id, so leave $3 empty\n\t\t\t<?(.*?)>?\t\t\t\t// href = $4\n\t\t\t[ \\t]*\n\t\t\t(\t\t\t\t\t\t// $5\n\t\t\t\t(['\"])\t\t\t\t// quote char = $6\n\t\t\t\t(.*?)\t\t\t\t// Title = $7\n\t\t\t\t\\6\t\t\t\t\t// matching quote\n\t\t\t\t[ \\t]*\t\t\t\t// ignore any spaces/tabs between closing quote and )\n\t\t\t)?\t\t\t\t\t\t// title is optional\n\t\t\t\\)\n\t\t)\n\t\t/g,writeAnchorTag);\n\t*/\n\ttext = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,writeAnchorTag);\n\n\t//\n\t// Last, handle reference-style shortcuts: [link text]\n\t// These must come last in case you've also got [link test][1]\n\t// or [link test](/foo)\n\t//\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(\t\t \t\t\t\t\t// wrap whole match in $1\n\t\t\t\\[\n\t\t\t([^\\[\\]]+)\t\t\t\t// link text = $2; can't contain '[' or ']'\n\t\t\t\\]\n\t\t)()()()()()\t\t\t\t\t// pad rest of backreferences\n\t\t/g, writeAnchorTag);\n\t*/\n\ttext = text.replace(/(\\[([^\\[\\]]+)\\])()()()()()/g, writeAnchorTag);\n\n\treturn text;\n}\n\nvar writeAnchorTag = function(wholeMatch,m1,m2,m3,m4,m5,m6,m7) {\n\tif (m7 == undefined) m7 = \"\";\n\tvar whole_match = m1;\n\tvar link_text   = m2;\n\tvar link_id\t = m3.toLowerCase();\n\tvar url\t\t= m4;\n\tvar title\t= m7;\n\n\tif (url == \"\") {\n\t\tif (link_id == \"\") {\n\t\t\t// lower-case and turn embedded newlines into spaces\n\t\t\tlink_id = link_text.toLowerCase().replace(/ ?\\n/g,\" \");\n\t\t}\n\t\turl = \"#\"+link_id;\n\n\t\tif (g_urls[link_id] != undefined) {\n\t\t\turl = g_urls[link_id];\n\t\t\tif (g_titles[link_id] != undefined) {\n\t\t\t\ttitle = g_titles[link_id];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (whole_match.search(/\\(\\s*\\)$/m)>-1) {\n\t\t\t\t// Special case for explicit empty url\n\t\t\t\turl = \"\";\n\t\t\t} else {\n\t\t\t\treturn whole_match;\n\t\t\t}\n\t\t}\n\t}\n\n\turl = escapeCharacters(url,\"*_\");\n\tvar result = \"<a href=\\\"\" + url + \"\\\"\";\n\n\tif (title != \"\") {\n\t\ttitle = title.replace(/\"/g,\"&quot;\");\n\t\ttitle = escapeCharacters(title,\"*_\");\n\t\tresult +=  \" title=\\\"\" + title + \"\\\"\";\n\t}\n\n\tresult += \">\" + link_text + \"</a>\";\n\n\treturn result;\n}\n\n\nvar _DoImages = function(text) {\n//\n// Turn Markdown image shortcuts into <img> tags.\n//\n\n\t//\n\t// First, handle reference-style labeled images: ![alt text][id]\n\t//\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(\t\t\t\t\t\t// wrap whole match in $1\n\t\t\t!\\[\n\t\t\t(.*?)\t\t\t\t// alt text = $2\n\t\t\t\\]\n\n\t\t\t[ ]?\t\t\t\t// one optional space\n\t\t\t(?:\\n[ ]*)?\t\t\t// one optional newline followed by spaces\n\n\t\t\t\\[\n\t\t\t(.*?)\t\t\t\t// id = $3\n\t\t\t\\]\n\t\t)()()()()\t\t\t\t// pad rest of backreferences\n\t\t/g,writeImageTag);\n\t*/\n\ttext = text.replace(/(!\\[(.*?)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g,writeImageTag);\n\n\t//\n\t// Next, handle inline images:  ![alt text](url \"optional title\")\n\t// Don't forget: encode * and _\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(\t\t\t\t\t\t// wrap whole match in $1\n\t\t\t!\\[\n\t\t\t(.*?)\t\t\t\t// alt text = $2\n\t\t\t\\]\n\t\t\t\\s?\t\t\t\t\t// One optional whitespace character\n\t\t\t\\(\t\t\t\t\t// literal paren\n\t\t\t[ \\t]*\n\t\t\t()\t\t\t\t\t// no id, so leave $3 empty\n\t\t\t<?(\\S+?)>?\t\t\t// src url = $4\n\t\t\t[ \\t]*\n\t\t\t(\t\t\t\t\t// $5\n\t\t\t\t(['\"])\t\t\t// quote char = $6\n\t\t\t\t(.*?)\t\t\t// title = $7\n\t\t\t\t\\6\t\t\t\t// matching quote\n\t\t\t\t[ \\t]*\n\t\t\t)?\t\t\t\t\t// title is optional\n\t\t\\)\n\t\t)\n\t\t/g,writeImageTag);\n\t*/\n\ttext = text.replace(/(!\\[(.*?)\\]\\s?\\([ \\t]*()<?(\\S+?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,writeImageTag);\n\n\treturn text;\n}\n\nvar writeImageTag = function(wholeMatch,m1,m2,m3,m4,m5,m6,m7) {\n\tvar whole_match = m1;\n\tvar alt_text   = m2;\n\tvar link_id\t = m3.toLowerCase();\n\tvar url\t\t= m4;\n\tvar title\t= m7;\n\n\tif (!title) title = \"\";\n\n\tif (url == \"\") {\n\t\tif (link_id == \"\") {\n\t\t\t// lower-case and turn embedded newlines into spaces\n\t\t\tlink_id = alt_text.toLowerCase().replace(/ ?\\n/g,\" \");\n\t\t}\n\t\turl = \"#\"+link_id;\n\n\t\tif (g_urls[link_id] != undefined) {\n\t\t\turl = g_urls[link_id];\n\t\t\tif (g_titles[link_id] != undefined) {\n\t\t\t\ttitle = g_titles[link_id];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn whole_match;\n\t\t}\n\t}\n\n\talt_text = alt_text.replace(/\"/g,\"&quot;\");\n\turl = escapeCharacters(url,\"*_\");\n\tvar result = \"<img src=\\\"\" + url + \"\\\" alt=\\\"\" + alt_text + \"\\\"\";\n\n\t// attacklab: Markdown.pl adds empty title attributes to images.\n\t// Replicate this bug.\n\n\t//if (title != \"\") {\n\t\ttitle = title.replace(/\"/g,\"&quot;\");\n\t\ttitle = escapeCharacters(title,\"*_\");\n\t\tresult +=  \" title=\\\"\" + title + \"\\\"\";\n\t//}\n\n\tresult += \" />\";\n\n\treturn result;\n}\n\n\nvar _DoHeaders = function(text) {\n\n\t// Setext-style headers:\n\t//\tHeader 1\n\t//\t========\n\t//\n\t//\tHeader 2\n\t//\t--------\n\t//\n\ttext = text.replace(/^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n\t\tfunction(wholeMatch,m1){return hashBlock('<h1 id=\"' + headerId(m1) + '\">' + _RunSpanGamut(m1) + \"</h1>\");});\n\n\ttext = text.replace(/^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm,\n\t\tfunction(matchFound,m1){return hashBlock('<h2 id=\"' + headerId(m1) + '\">' + _RunSpanGamut(m1) + \"</h2>\");});\n\n\t// atx-style headers:\n\t//  # Header 1\n\t//  ## Header 2\n\t//  ## Header 2 with closing hashes ##\n\t//  ...\n\t//  ###### Header 6\n\t//\n\n\t/*\n\t\ttext = text.replace(/\n\t\t\t^(\\#{1,6})\t\t\t\t// $1 = string of #'s\n\t\t\t[ \\t]*\n\t\t\t(.+?)\t\t\t\t\t// $2 = Header text\n\t\t\t[ \\t]*\n\t\t\t\\#*\t\t\t\t\t\t// optional closing #'s (not counted)\n\t\t\t\\n+\n\t\t/gm, function() {...});\n\t*/\n\n\ttext = text.replace(/^(\\#{1,6})[ \\t]*(.+?)[ \\t]*\\#*\\n+/gm,\n\t\tfunction(wholeMatch,m1,m2) {\n\t\t\tvar h_level = m1.length;\n\t\t\treturn hashBlock(\"<h\" + h_level + ' id=\"' + headerId(m2) + '\">' + _RunSpanGamut(m2) + \"</h\" + h_level + \">\");\n\t\t});\n\n\tfunction headerId(m) {\n\t\treturn m.replace(/[^\\w]/g, '').toLowerCase();\n\t}\n\treturn text;\n}\n\n// This declaration keeps Dojo compressor from outputting garbage:\nvar _ProcessListItems;\n\nvar _DoLists = function(text) {\n//\n// Form HTML ordered (numbered) and unordered (bulleted) lists.\n//\n\n\t// attacklab: add sentinel to hack around khtml/safari bug:\n\t// http://bugs.webkit.org/show_bug.cgi?id=11231\n\ttext += \"~0\";\n\n\t// Re-usable pattern to match any entirel ul or ol list:\n\n\t/*\n\t\tvar whole_list = /\n\t\t(\t\t\t\t\t\t\t\t\t// $1 = whole list\n\t\t\t(\t\t\t\t\t\t\t\t// $2\n\t\t\t\t[ ]{0,3}\t\t\t\t\t// attacklab: g_tab_width - 1\n\t\t\t\t([*+-]|\\d+[.])\t\t\t\t// $3 = first list item marker\n\t\t\t\t[ \\t]+\n\t\t\t)\n\t\t\t[^\\r]+?\n\t\t\t(\t\t\t\t\t\t\t\t// $4\n\t\t\t\t~0\t\t\t\t\t\t\t// sentinel for workaround; should be $\n\t\t\t|\n\t\t\t\t\\n{2,}\n\t\t\t\t(?=\\S)\n\t\t\t\t(?!\t\t\t\t\t\t\t// Negative lookahead for another list item marker\n\t\t\t\t\t[ \\t]*\n\t\t\t\t\t(?:[*+-]|\\d+[.])[ \\t]+\n\t\t\t\t)\n\t\t\t)\n\t\t)/g\n\t*/\n\tvar whole_list = /^(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm;\n\n\tif (g_list_level) {\n\t\ttext = text.replace(whole_list,function(wholeMatch,m1,m2) {\n\t\t\tvar list = m1;\n\t\t\tvar list_type = (m2.search(/[*+-]/g)>-1) ? \"ul\" : \"ol\";\n\n\t\t\t// Turn double returns into triple returns, so that we can make a\n\t\t\t// paragraph for the last item in a list, if necessary:\n\t\t\tlist = list.replace(/\\n{2,}/g,\"\\n\\n\\n\");;\n\t\t\tvar result = _ProcessListItems(list);\n\n\t\t\t// Trim any trailing whitespace, to put the closing `</$list_type>`\n\t\t\t// up on the preceding line, to get it past the current stupid\n\t\t\t// HTML block parser. This is a hack to work around the terrible\n\t\t\t// hack that is the HTML block parser.\n\t\t\tresult = result.replace(/\\s+$/,\"\");\n\t\t\tresult = \"<\"+list_type+\">\" + result + \"</\"+list_type+\">\\n\";\n\t\t\treturn result;\n\t\t});\n\t} else {\n\t\twhole_list = /(\\n\\n|^\\n?)(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/g;\n\t\ttext = text.replace(whole_list,function(wholeMatch,m1,m2,m3) {\n\t\t\tvar runup = m1;\n\t\t\tvar list = m2;\n\n\t\t\tvar list_type = (m3.search(/[*+-]/g)>-1) ? \"ul\" : \"ol\";\n\t\t\t// Turn double returns into triple returns, so that we can make a\n\t\t\t// paragraph for the last item in a list, if necessary:\n\t\t\tvar list = list.replace(/\\n{2,}/g,\"\\n\\n\\n\");;\n\t\t\tvar result = _ProcessListItems(list);\n\t\t\tresult = runup + \"<\"+list_type+\">\\n\" + result + \"</\"+list_type+\">\\n\";\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t// attacklab: strip sentinel\n\ttext = text.replace(/~0/,\"\");\n\n\treturn text;\n}\n\n_ProcessListItems = function(list_str) {\n//\n//  Process the contents of a single ordered or unordered list, splitting it\n//  into individual list items.\n//\n\t// The $g_list_level global keeps track of when we're inside a list.\n\t// Each time we enter a list, we increment it; when we leave a list,\n\t// we decrement. If it's zero, we're not in a list anymore.\n\t//\n\t// We do this because when we're not inside a list, we want to treat\n\t// something like this:\n\t//\n\t//    I recommend upgrading to version\n\t//    8. Oops, now this line is treated\n\t//    as a sub-list.\n\t//\n\t// As a single paragraph, despite the fact that the second line starts\n\t// with a digit-period-space sequence.\n\t//\n\t// Whereas when we're inside a list (or sub-list), that line will be\n\t// treated as the start of a sub-list. What a kludge, huh? This is\n\t// an aspect of Markdown's syntax that's hard to parse perfectly\n\t// without resorting to mind-reading. Perhaps the solution is to\n\t// change the syntax rules such that sub-lists must start with a\n\t// starting cardinal number; e.g. \"1.\" or \"a.\".\n\n\tg_list_level++;\n\n\t// trim trailing blank lines:\n\tlist_str = list_str.replace(/\\n{2,}$/,\"\\n\");\n\n\t// attacklab: add sentinel to emulate \\z\n\tlist_str += \"~0\";\n\n\t/*\n\t\tlist_str = list_str.replace(/\n\t\t\t(\\n)?\t\t\t\t\t\t\t// leading line = $1\n\t\t\t(^[ \\t]*)\t\t\t\t\t\t// leading whitespace = $2\n\t\t\t([*+-]|\\d+[.]) [ \\t]+\t\t\t// list marker = $3\n\t\t\t([^\\r]+?\t\t\t\t\t\t// list item text   = $4\n\t\t\t(\\n{1,2}))\n\t\t\t(?= \\n* (~0 | \\2 ([*+-]|\\d+[.]) [ \\t]+))\n\t\t/gm, function(){...});\n\t*/\n\tlist_str = list_str.replace(/(\\n)?(^[ \\t]*)([*+-]|\\d+[.])[ \\t]+([^\\r]+?(\\n{1,2}))(?=\\n*(~0|\\2([*+-]|\\d+[.])[ \\t]+))/gm,\n\t\tfunction(wholeMatch,m1,m2,m3,m4){\n\t\t\tvar item = m4;\n\t\t\tvar leading_line = m1;\n\t\t\tvar leading_space = m2;\n\n\t\t\tif (leading_line || (item.search(/\\n{2,}/)>-1)) {\n\t\t\t\titem = _RunBlockGamut(_Outdent(item));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Recursion for sub-lists:\n\t\t\t\titem = _DoLists(_Outdent(item));\n\t\t\t\titem = item.replace(/\\n$/,\"\"); // chomp(item)\n\t\t\t\titem = _RunSpanGamut(item);\n\t\t\t}\n\n\t\t\treturn  \"<li>\" + item + \"</li>\\n\";\n\t\t}\n\t);\n\n\t// attacklab: strip sentinel\n\tlist_str = list_str.replace(/~0/g,\"\");\n\n\tg_list_level--;\n\treturn list_str;\n}\n\n\nvar _DoCodeBlocks = function(text) {\n//\n//  Process Markdown `<pre><code>` blocks.\n//\n\n\t/*\n\t\ttext = text.replace(text,\n\t\t\t/(?:\\n\\n|^)\n\t\t\t(\t\t\t\t\t\t\t\t// $1 = the code block -- one or more lines, starting with a space/tab\n\t\t\t\t(?:\n\t\t\t\t\t(?:[ ]{4}|\\t)\t\t\t// Lines must start with a tab or a tab-width of spaces - attacklab: g_tab_width\n\t\t\t\t\t.*\\n+\n\t\t\t\t)+\n\t\t\t)\n\t\t\t(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))\t// attacklab: g_tab_width\n\t\t/g,function(){...});\n\t*/\n\n\t// attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n\ttext += \"~0\";\n\n\ttext = text.replace(/(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))/g,\n\t\tfunction(wholeMatch,m1,m2) {\n\t\t\tvar codeblock = m1;\n\t\t\tvar nextChar = m2;\n\n\t\t\tcodeblock = _EncodeCode( _Outdent(codeblock));\n\t\t\tcodeblock = _Detab(codeblock);\n\t\t\tcodeblock = codeblock.replace(/^\\n+/g,\"\"); // trim leading newlines\n\t\t\tcodeblock = codeblock.replace(/\\n+$/g,\"\"); // trim trailing whitespace\n\n\t\t\tcodeblock = \"<pre><code>\" + codeblock + \"\\n</code></pre>\";\n\n\t\t\treturn hashBlock(codeblock) + nextChar;\n\t\t}\n\t);\n\n\t// attacklab: strip sentinel\n\ttext = text.replace(/~0/,\"\");\n\n\treturn text;\n};\n\nvar _DoGithubCodeBlocks = function(text) {\n//\n//  Process Github-style code blocks\n//  Example:\n//  ```ruby\n//  def hello_world(x)\n//    puts \"Hello, #{x}\"\n//  end\n//  ```\n//\n\n\n\t// attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n\ttext += \"~0\";\n\n\ttext = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g,\n\t\tfunction(wholeMatch,m1,m2) {\n\t\t\tvar language = m1;\n\t\t\tvar codeblock = m2;\n\n\t\t\tcodeblock = _EncodeCode(codeblock);\n\t\t\tcodeblock = _Detab(codeblock);\n\t\t\tcodeblock = codeblock.replace(/^\\n+/g,\"\"); // trim leading newlines\n\t\t\tcodeblock = codeblock.replace(/\\n+$/g,\"\"); // trim trailing whitespace\n\n\t\t\tcodeblock = \"<pre><code\" + (language ? \" class=\\\"\" + language + '\"' : \"\") + \">\" + codeblock + \"\\n</code></pre>\";\n\n\t\t\treturn hashBlock(codeblock);\n\t\t}\n\t);\n\n\t// attacklab: strip sentinel\n\ttext = text.replace(/~0/,\"\");\n\n\treturn text;\n}\n\nvar hashBlock = function(text) {\n\ttext = text.replace(/(^\\n+|\\n+$)/g,\"\");\n\treturn \"\\n\\n~K\" + (g_html_blocks.push(text)-1) + \"K\\n\\n\";\n}\n\nvar _DoCodeSpans = function(text) {\n//\n//   *  Backtick quotes are used for <code></code> spans.\n//\n//   *  You can use multiple backticks as the delimiters if you want to\n//\t include literal backticks in the code span. So, this input:\n//\n//\t\t Just type ``foo `bar` baz`` at the prompt.\n//\n//\t   Will translate to:\n//\n//\t\t <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n//\n//\tThere's no arbitrary limit to the number of backticks you\n//\tcan use as delimters. If you need three consecutive backticks\n//\tin your code, use four for delimiters, etc.\n//\n//  *  You can use spaces to get literal backticks at the edges:\n//\n//\t\t ... type `` `bar` `` ...\n//\n//\t   Turns to:\n//\n//\t\t ... type <code>`bar`</code> ...\n//\n\n\t/*\n\t\ttext = text.replace(/\n\t\t\t(^|[^\\\\])\t\t\t\t\t// Character before opening ` can't be a backslash\n\t\t\t(`+)\t\t\t\t\t\t// $2 = Opening run of `\n\t\t\t(\t\t\t\t\t\t\t// $3 = The code block\n\t\t\t\t[^\\r]*?\n\t\t\t\t[^`]\t\t\t\t\t// attacklab: work around lack of lookbehind\n\t\t\t)\n\t\t\t\\2\t\t\t\t\t\t\t// Matching closer\n\t\t\t(?!`)\n\t\t/gm, function(){...});\n\t*/\n\n\ttext = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n\t\tfunction(wholeMatch,m1,m2,m3,m4) {\n\t\t\tvar c = m3;\n\t\t\tc = c.replace(/^([ \\t]*)/g,\"\");\t// leading whitespace\n\t\t\tc = c.replace(/[ \\t]*$/g,\"\");\t// trailing whitespace\n\t\t\tc = _EncodeCode(c);\n\t\t\treturn m1+\"<code>\"+c+\"</code>\";\n\t\t});\n\n\treturn text;\n}\n\nvar _EncodeCode = function(text) {\n//\n// Encode/escape certain characters inside Markdown code runs.\n// The point is that in code, these characters are literals,\n// and lose their special Markdown meanings.\n//\n\t// Encode all ampersands; HTML entities are not\n\t// entities within a Markdown code span.\n\ttext = text.replace(/&/g,\"&amp;\");\n\n\t// Do the angle bracket song and dance:\n\ttext = text.replace(/</g,\"&lt;\");\n\ttext = text.replace(/>/g,\"&gt;\");\n\n\t// Now, escape characters that are magic in Markdown:\n\ttext = escapeCharacters(text,\"\\*_{}[]\\\\\",false);\n\n// jj the line above breaks this:\n//---\n\n//* Item\n\n//   1. Subitem\n\n//            special char: *\n//---\n\n\treturn text;\n}\n\n\nvar _DoItalicsAndBold = function(text) {\n\n\t// <strong> must go first:\n\ttext = text.replace(/(\\*\\*|__)(?=\\S)([^\\r]*?\\S[*_]*)\\1/g,\n\t\t\"<strong>$2</strong>\");\n\n\ttext = text.replace(/(\\*|_)(?=\\S)([^\\r]*?\\S)\\1/g,\n\t\t\"<em>$2</em>\");\n\n\treturn text;\n}\n\n\nvar _DoBlockQuotes = function(text) {\n\n\t/*\n\t\ttext = text.replace(/\n\t\t(\t\t\t\t\t\t\t\t// Wrap whole match in $1\n\t\t\t(\n\t\t\t\t^[ \\t]*>[ \\t]?\t\t\t// '>' at the start of a line\n\t\t\t\t.+\\n\t\t\t\t\t// rest of the first line\n\t\t\t\t(.+\\n)*\t\t\t\t\t// subsequent consecutive lines\n\t\t\t\t\\n*\t\t\t\t\t\t// blanks\n\t\t\t)+\n\t\t)\n\t\t/gm, function(){...});\n\t*/\n\n\ttext = text.replace(/((^[ \\t]*>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm,\n\t\tfunction(wholeMatch,m1) {\n\t\t\tvar bq = m1;\n\n\t\t\t// attacklab: hack around Konqueror 3.5.4 bug:\n\t\t\t// \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n\t\t\tbq = bq.replace(/^[ \\t]*>[ \\t]?/gm,\"~0\");\t// trim one level of quoting\n\n\t\t\t// attacklab: clean up hack\n\t\t\tbq = bq.replace(/~0/g,\"\");\n\n\t\t\tbq = bq.replace(/^[ \\t]+$/gm,\"\");\t\t// trim whitespace-only lines\n\t\t\tbq = _RunBlockGamut(bq);\t\t\t\t// recurse\n\n\t\t\tbq = bq.replace(/(^|\\n)/g,\"$1  \");\n\t\t\t// These leading spaces screw with <pre> content, so we need to fix that:\n\t\t\tbq = bq.replace(\n\t\t\t\t\t/(\\s*<pre>[^\\r]+?<\\/pre>)/gm,\n\t\t\t\tfunction(wholeMatch,m1) {\n\t\t\t\t\tvar pre = m1;\n\t\t\t\t\t// attacklab: hack around Konqueror 3.5.4 bug:\n\t\t\t\t\tpre = pre.replace(/^  /mg,\"~0\");\n\t\t\t\t\tpre = pre.replace(/~0/g,\"\");\n\t\t\t\t\treturn pre;\n\t\t\t\t});\n\n\t\t\treturn hashBlock(\"<blockquote>\\n\" + bq + \"\\n</blockquote>\");\n\t\t});\n\treturn text;\n}\n\n\nvar _FormParagraphs = function(text) {\n//\n//  Params:\n//    $text - string to process with html <p> tags\n//\n\n\t// Strip leading and trailing lines:\n\ttext = text.replace(/^\\n+/g,\"\");\n\ttext = text.replace(/\\n+$/g,\"\");\n\n\tvar grafs = text.split(/\\n{2,}/g);\n\tvar grafsOut = [];\n\n\t//\n\t// Wrap <p> tags.\n\t//\n\tvar end = grafs.length;\n\tfor (var i=0; i<end; i++) {\n\t\tvar str = grafs[i];\n\n\t\t// if this is an HTML marker, copy it\n\t\tif (str.search(/~K(\\d+)K/g) >= 0) {\n\t\t\tgrafsOut.push(str);\n\t\t}\n\t\telse if (str.search(/\\S/) >= 0) {\n\t\t\tstr = _RunSpanGamut(str);\n\t\t\tstr = str.replace(/^([ \\t]*)/g,\"<p>\");\n\t\t\tstr += \"</p>\"\n\t\t\tgrafsOut.push(str);\n\t\t}\n\n\t}\n\n\t//\n\t// Unhashify HTML blocks\n\t//\n\tend = grafsOut.length;\n\tfor (var i=0; i<end; i++) {\n\t\t// if this is a marker for an html block...\n\t\twhile (grafsOut[i].search(/~K(\\d+)K/) >= 0) {\n\t\t\tvar blockText = g_html_blocks[RegExp.$1];\n\t\t\tblockText = blockText.replace(/\\$/g,\"$$$$\"); // Escape any dollar signs\n\t\t\tgrafsOut[i] = grafsOut[i].replace(/~K\\d+K/,blockText);\n\t\t}\n\t}\n\n\treturn grafsOut.join(\"\\n\\n\");\n}\n\n\nvar _EncodeAmpsAndAngles = function(text) {\n// Smart processing for ampersands and angle brackets that need to be encoded.\n\n\t// Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n\t//   http://bumppo.net/projects/amputator/\n\ttext = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g,\"&amp;\");\n\n\t// Encode naked <'s\n\ttext = text.replace(/<(?![a-z\\/?\\$!])/gi,\"&lt;\");\n\n\treturn text;\n}\n\n\nvar _EncodeBackslashEscapes = function(text) {\n//\n//   Parameter:  String.\n//   Returns:\tThe string, with after processing the following backslash\n//\t\t\t   escape sequences.\n//\n\n\t// attacklab: The polite way to do this is with the new\n\t// escapeCharacters() function:\n\t//\n\t// \ttext = escapeCharacters(text,\"\\\\\",true);\n\t// \ttext = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n\t//\n\t// ...but we're sidestepping its use of the (slow) RegExp constructor\n\t// as an optimization for Firefox.  This function gets called a LOT.\n\n\ttext = text.replace(/\\\\(\\\\)/g,escapeCharacters_callback);\n\ttext = text.replace(/\\\\([`*_{}\\[\\]()>#+-.!])/g,escapeCharacters_callback);\n\treturn text;\n}\n\n\nvar _DoAutoLinks = function(text) {\n\n\ttext = text.replace(/<((https?|ftp|dict):[^'\">\\s]+)>/gi,\"<a href=\\\"$1\\\">$1</a>\");\n\n\t// Email addresses: <address@domain.foo>\n\n\t/*\n\t\ttext = text.replace(/\n\t\t\t<\n\t\t\t(?:mailto:)?\n\t\t\t(\n\t\t\t\t[-.\\w]+\n\t\t\t\t\\@\n\t\t\t\t[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+\n\t\t\t)\n\t\t\t>\n\t\t/gi, _DoAutoLinks_callback());\n\t*/\n\ttext = text.replace(/<(?:mailto:)?([-.\\w]+\\@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\n\t\tfunction(wholeMatch,m1) {\n\t\t\treturn _EncodeEmailAddress( _UnescapeSpecialChars(m1) );\n\t\t}\n\t);\n\n\treturn text;\n}\n\n\nvar _EncodeEmailAddress = function(addr) {\n//\n//  Input: an email address, e.g. \"foo@example.com\"\n//\n//  Output: the email address as a mailto link, with each character\n//\tof the address encoded as either a decimal or hex entity, in\n//\tthe hopes of foiling most address harvesting spam bots. E.g.:\n//\n//\t<a href=\"&#x6D;&#97;&#105;&#108;&#x74;&#111;:&#102;&#111;&#111;&#64;&#101;\n//\t   x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;\">&#102;&#111;&#111;\n//\t   &#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;</a>\n//\n//  Based on a filter by Matthew Wickline, posted to the BBEdit-Talk\n//  mailing list: <http://tinyurl.com/yu7ue>\n//\n\n\tvar encode = [\n\t\tfunction(ch){return \"&#\"+ch.charCodeAt(0)+\";\";},\n\t\tfunction(ch){return \"&#x\"+ch.charCodeAt(0).toString(16)+\";\";},\n\t\tfunction(ch){return ch;}\n\t];\n\n\taddr = \"mailto:\" + addr;\n\n\taddr = addr.replace(/./g, function(ch) {\n\t\tif (ch == \"@\") {\n\t\t   \t// this *must* be encoded. I insist.\n\t\t\tch = encode[Math.floor(Math.random()*2)](ch);\n\t\t} else if (ch !=\":\") {\n\t\t\t// leave ':' alone (to spot mailto: later)\n\t\t\tvar r = Math.random();\n\t\t\t// roughly 10% raw, 45% hex, 45% dec\n\t\t\tch =  (\n\t\t\t\t\tr > .9  ?\tencode[2](ch)   :\n\t\t\t\t\tr > .45 ?\tencode[1](ch)   :\n\t\t\t\t\t\t\t\tencode[0](ch)\n\t\t\t\t);\n\t\t}\n\t\treturn ch;\n\t});\n\n\taddr = \"<a href=\\\"\" + addr + \"\\\">\" + addr + \"</a>\";\n\taddr = addr.replace(/\">.+:/g,\"\\\">\"); // strip the mailto: from the visible part\n\n\treturn addr;\n}\n\n\nvar _UnescapeSpecialChars = function(text) {\n//\n// Swap back in all the special characters we've hidden.\n//\n\ttext = text.replace(/~E(\\d+)E/g,\n\t\tfunction(wholeMatch,m1) {\n\t\t\tvar charCodeToReplace = parseInt(m1);\n\t\t\treturn String.fromCharCode(charCodeToReplace);\n\t\t}\n\t);\n\treturn text;\n}\n\n\nvar _Outdent = function(text) {\n//\n// Remove one level of line-leading tabs or spaces\n//\n\n\t// attacklab: hack around Konqueror 3.5.4 bug:\n\t// \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n\ttext = text.replace(/^(\\t|[ ]{1,4})/gm,\"~0\"); // attacklab: g_tab_width\n\n\t// attacklab: clean up hack\n\ttext = text.replace(/~0/g,\"\")\n\n\treturn text;\n}\n\nvar _Detab = function(text) {\n// attacklab: Detab's completely rewritten for speed.\n// In perl we could fix it by anchoring the regexp with \\G.\n// In javascript we're less fortunate.\n\n\t// expand first n-1 tabs\n\ttext = text.replace(/\\t(?=\\t)/g,\"    \"); // attacklab: g_tab_width\n\n\t// replace the nth with two sentinels\n\ttext = text.replace(/\\t/g,\"~A~B\");\n\n\t// use the sentinel to anchor our regex so it doesn't explode\n\ttext = text.replace(/~B(.+?)~A/g,\n\t\tfunction(wholeMatch,m1,m2) {\n\t\t\tvar leadingText = m1;\n\t\t\tvar numSpaces = 4 - leadingText.length % 4;  // attacklab: g_tab_width\n\n\t\t\t// there *must* be a better way to do this:\n\t\t\tfor (var i=0; i<numSpaces; i++) leadingText+=\" \";\n\n\t\t\treturn leadingText;\n\t\t}\n\t);\n\n\t// clean up sentinels\n\ttext = text.replace(/~A/g,\"    \");  // attacklab: g_tab_width\n\ttext = text.replace(/~B/g,\"\");\n\n\treturn text;\n}\n\n\n//\n//  attacklab: Utility functions\n//\n\n\nvar escapeCharacters = function(text, charsToEscape, afterBackslash) {\n\t// First we have to escape the escape characters so that\n\t// we can build a character class out of them\n\tvar regexString = \"([\" + charsToEscape.replace(/([\\[\\]\\\\])/g,\"\\\\$1\") + \"])\";\n\n\tif (afterBackslash) {\n\t\tregexString = \"\\\\\\\\\" + regexString;\n\t}\n\n\tvar regex = new RegExp(regexString,\"g\");\n\ttext = text.replace(regex,escapeCharacters_callback);\n\n\treturn text;\n}\n\n\nvar escapeCharacters_callback = function(wholeMatch,m1) {\n\tvar charCodeToEscape = m1.charCodeAt(0);\n\treturn \"~E\"+charCodeToEscape+\"E\";\n}\n\n} // end of Showdown.converter\n\n\n// export\nif (typeof module !== 'undefined') module.exports = Showdown;\n\n// stolen from AMD branch of underscore\n// AMD define happens at the end for compatibility with AMD loaders\n// that don't enforce next-turn semantics on modules.\nif (typeof define === 'function' && define.amd) {\n    define('showdown', function() {\n        return Showdown;\n    });\n}\n"]}