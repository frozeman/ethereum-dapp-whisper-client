{"version":3,"sources":["raix:handlebar-helpers/common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,e;AACA,qC;AACA,e;AACA,C;;AAEA,sB;;AAEA,iF;AACA,O;AACA,kE;AACA,kE;AACA,+F;AACA,kE;AACA,gF;;AAEA,qE;AACA,2B;;AAEA,kB;AACA,2C;AACA,iD;AACA,+B;AACA,iD;AACA,G;AACA,E;;AAEA,gC;AACA,8C;AACA,yB;AACA,E;;AAEA,wC;AACA,sB;AACA,E;;AAEA,wC;AACA,+B;AACA,E;;AAEA,+D;AACA,uC;AACA,qB;AACA,iC;AACA,6B;AACA,qB;AACA,iC;AACA,6B;AACA,kD;AACA,qD;AACA,wE;AACA,+B;AACA,2D;AACA,e;AACA,qB;AACA,iD;AACA,4B;AACA,K;AACA,E;;AAEA,G;AACA,E;AACA,uB;AACA,yB;AACA,mB;AACA,G;AACA,yC;AACA,+B;AACA,mD;AACA,uE;AACA,oH;AACA,E","file":"/packages/raix:handlebar-helpers.js","sourcesContent":["// Helper scope\nif (typeof Helpers === 'undefined') {\n  Helpers = {};\n}\n\nvar languageText = {};\n\n// expects an array: languageText['say.hello.to.me']['en'] = 'Say hello to me:)';\n// ex.:\n// getText('Say.Hello.To.Me') == 'say hello to me:)'; // lowercase\n// getText('SAY.HELLO.TO.ME') == 'SAY HELLO TO ME:)'; // uppercase\n// getText('Say.hello.to.me') == 'Say hello to me:)'; // uppercase first letter, rest lowercase\n// getText('Say.Hello.To.Me') == 'Say Hello To Me:)'; // camelCase\n// getText('SAy.hello.to.me') == 'Say hello To me:)'; // ignore case sensitivity\n\nvar _languageDeps = (Meteor.isClient) ? new Deps.Dependency() : null;\nvar currentLanguage = 'en';\n\n// language = 'en'\nHelpers.setLanguage = function (language) {\n  if (language && language !== currentLanguage) {\n    currentLanguage = language;\n    if (Meteor.isClient) _languageDeps.changed();\n  }\n};\n\nHelpers.language = function () {\n  if (Meteor.isClient) _languageDeps.depend();\n  return currentLanguage;\n};\n\nHelpers.setDictionary = function(dict) {\n  languageText = dict;\n};\n\nHelpers.addDictionary = function(dict) {\n  _.extend(languageText, dict);\n};\n\n// handleCase will mimic text Case making src same case as text\nvar handleCase = function (text, src) {\n  // Return lowercase\n  if (text == text.toLowerCase())\n    return src.toLowerCase();\n  // Return uppercase\n  if (text == text.toUpperCase())\n    return src.toUpperCase();\n  // Return uppercase first letter, rest lowercase\n  if (text.substr(1) == text.substr(1).toLowerCase())\n    return src.substr(0, 1).toUpperCase() + src.substr(1).toLowerCase();\n  // Return src withour changes\n  if (text.substr(0, 2) == text.substr(0, 2).toUpperCase())\n    return src;\n  // Return CamelCase\n  return src.replace(/( [a-z])/g, function ($1) {\n    return $1.toUpperCase();\n  });\n};\n\n/**\n *\n * @param {string} text\n * @param {string} [lang]\n * @return {string}\n */\nHelpers.getText = function (text, lang) {\n  var txt = text.toLowerCase();\n  var langText = languageText && languageText[txt];\n  var langKey = (typeof lang === 'string') ? lang : Helpers.language();\n  return handleCase(text, (langText) ? ( (langText[langKey]) ? langText[langKey] : langText.en) : '[' + text + ']');\n};"]}